"""
Script para importar dados de procedimentos da aba "Procedimentos" do Google Sheets.
Processa dados estruturados com informa√ß√µes detalhadas de cada procedimento.
"""

import gspread
import pandas as pd
from database import db_manager, cliente_crud, procedimento_crud
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
from dotenv import load_dotenv
from datetime import datetime
import re

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes
GOOGLE_SHEETS_CREDENTIALS = os.getenv('GOOGLE_SHEETS_CREDENTIALS', '{}')

def setup_google_sheets_auth():
    """Configura autentica√ß√£o com Google Sheets"""
    try:
        if GOOGLE_SHEETS_CREDENTIALS and GOOGLE_SHEETS_CREDENTIALS != '{}':
            try:
                credentials_json = json.loads(GOOGLE_SHEETS_CREDENTIALS)
                scope = [
                    'https://spreadsheets.google.com/feeds',
                    'https://www.googleapis.com/auth/drive'
                ]
                credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_json, scope)
                gc = gspread.authorize(credentials)
                print("‚úÖ Autentica√ß√£o com Google Sheets configurada!")
                return gc
            except Exception as e:
                print(f"‚ùå Erro ao usar credenciais das vari√°veis de ambiente: {e}")
                return None
        else:
            print("‚ùå GOOGLE_SHEETS_CREDENTIALS n√£o configurado")
            return None
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o: {e}")
        return None

def parse_date(date_str):
    """Converte string de data para datetime"""
    if not date_str or pd.isna(date_str) or str(date_str).strip() == '':
        return None
    
    try:
        # Tenta diferentes formatos de data
        date_formats = [
            '%d/%m/%Y',
            '%d/%m/%y',
            '%Y-%m-%d',
            '%d-%m-%Y'
        ]
        
        date_str = str(date_str).strip()
        for fmt in date_formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        
        # Se nenhum formato funcionou, tenta parsing autom√°tico do pandas
        return pd.to_datetime(date_str, dayfirst=True)
    except:
        return None

def parse_currency(value_str):
    """Converte string de moeda para float"""
    if not value_str or pd.isna(value_str) or str(value_str).strip() == '':
        return 0.0
    
    try:
        # Remove caracteres n√£o num√©ricos exceto v√≠rgula e ponto
        value_str = str(value_str).strip()
        value_str = re.sub(r'[^\d,.-]', '', value_str)
        
        # Substitui v√≠rgula por ponto se for separador decimal
        if ',' in value_str and '.' in value_str:
            # Formato brasileiro: 1.000,00
            value_str = value_str.replace('.', '').replace(',', '.')
        elif ',' in value_str and value_str.count(',') == 1:
            # Pode ser separador decimal
            parts = value_str.split(',')
            if len(parts) == 2 and len(parts[1]) <= 2:
                value_str = value_str.replace(',', '.')
            else:
                value_str = value_str.replace(',', '')
        
        return float(value_str)
    except:
        return 0.0

def import_procedimentos_from_sheets(sheet_id, sheet_name="Procedimentos"):
    """Importa dados de procedimentos do Google Sheets"""
    gc = setup_google_sheets_auth()
    if not gc:
        return None
    
    try:
        # Abre a planilha
        spreadsheet = gc.open_by_key(sheet_id)
        
        # Tenta encontrar a aba "Procedimentos"
        try:
            worksheet = spreadsheet.worksheet(sheet_name)
        except gspread.WorksheetNotFound:
            print(f"‚ùå Aba '{sheet_name}' n√£o encontrada na planilha")
            return None
        
        # Obt√©m todos os dados da aba
        all_values = worksheet.get_all_values()
        
        if not all_values or len(all_values) < 2:
            print(f"‚ùå Nenhum dado encontrado na aba '{sheet_name}'")
            return None
        
        # A estrutura da planilha √©:
        # Linha 1: M√™s de refer√™ncia (ex: "Outubro")
        # Linha 2: Cabe√ßalhos reais
        # Linhas 3+: Dados dos procedimentos
        
        if len(all_values) < 3:
            print(f"‚ùå Planilha tem menos de 3 linhas. Estrutura esperada: linha 1 (m√™s), linha 2 (cabe√ßalhos), linha 3+ (dados)")
            return None
        
        # Extrai o m√™s de refer√™ncia da primeira linha
        mes_referencia = all_values[0][0].strip() if all_values[0] and all_values[0][0].strip() else "Outubro"
        print(f"üìÖ M√™s de refer√™ncia: {mes_referencia}")
        
        # Segunda linha s√£o os cabe√ßalhos reais
        headers = all_values[1]
        data_rows = all_values[2:]
        
        print(f"üìä Encontrados {len(data_rows)} registros de procedimentos")
        print(f"üìã Cabe√ßalhos: {headers}")
        
        # Converte para DataFrame
        df = pd.DataFrame(data_rows, columns=headers)
        
        # Remove linhas vazias
        df = df.dropna(how='all')
        
        if df.empty:
            print("‚ùå Nenhum dado v√°lido encontrado")
            return None
        
        # Processa os dados
        processed_data = []
        
        print(f"üìä Processando {len(df)} linhas de dados...")
        
        for index, row in df.iterrows():
            try:
                print(f"üìÖ Processando linha {index + 1}/{len(df)}...")
                
                # Processa cada linha de dados usando o m√™s j√° extra√≠do
                procedimento_data = {
                    'mes_referencia': mes_referencia,
                    'ano_referencia': 2024,  # Padr√£o
                    'data_primeiro_contato': parse_date(row.get('Data 1¬∞ Contato', '')),
                    'data_compareceu_consulta': parse_date(row.get('Data Compareu na Consulta', '')),
                    'data_fechou_cirurgia': parse_date(row.get('Data Fechou Cirurgia', '')),
                    'procedimento': str(row.get('Procedimento', '')).strip(),
                    'tipo': str(row.get('Tipo', '')).strip(),
                    'quantidade_na_mesma_venda': int(row.get('Quantidade na Mesma Venda', 1)) if str(row.get('Quantidade na Mesma Venda', 1)).isdigit() else 1,
                    'forma_pagamento': str(row.get('Forma de Pagamento', '')).strip(),
                    'valor_da_venda': parse_currency(row.get('Valor da Venda', '')),
                    'valor_parcelado': parse_currency(row.get('Valor do Parcelado', ''))
                }
                
                # S√≥ adiciona se tiver pelo menos o procedimento
                if procedimento_data['procedimento'] and procedimento_data['procedimento'] != 'nan' and procedimento_data['procedimento'] != '':
                    processed_data.append(procedimento_data)
                    print(f"‚úÖ Linha {index + 1}: Procedimento '{procedimento_data['procedimento']}' adicionado")
                else:
                    print(f"‚ö†Ô∏è Linha {index + 1}: Ignorada - sem procedimento v√°lido")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao processar linha {index + 1}: {e}")
                print(f"   Dados da linha: {dict(row)}")
                continue
        
        if not processed_data:
            print("‚ùå Nenhum procedimento v√°lido processado")
            return None
        
        print(f"‚úÖ Processados {len(processed_data)} procedimentos v√°lidos")
        return pd.DataFrame(processed_data)
        
    except Exception as e:
        print(f"‚ùå Erro ao importar procedimentos: {e}")
        return None

def check_procedimentos_sheet_exists(sheet_id):
    """Verifica se a planilha tem aba 'Procedimentos'"""
    gc = setup_google_sheets_auth()
    if not gc:
        return False
    
    try:
        spreadsheet = gc.open_by_key(sheet_id)
        worksheet_names = [ws.title for ws in spreadsheet.worksheets()]
        return "Procedimentos" in worksheet_names
    except Exception as e:
        print(f"‚ùå Erro ao verificar abas da planilha: {e}")
        return False

def load_procedimentos_for_cliente(cliente):
    """Carrega procedimentos para uma cl√≠nica espec√≠fica"""
    print(f"üîÑ Processando cl√≠nica: {cliente.nome_da_clinica} (ID: {cliente.id})")
    
    if not hasattr(cliente, 'link_empresa') or not cliente.link_empresa:
        print(f"‚ö†Ô∏è Cl√≠nica {cliente.nome_da_clinica} n√£o tem link_empresa")
        return False
    
    # Extrai ID da planilha
    sheet_id = None
    patterns = [
        r'/spreadsheets/d/([a-zA-Z0-9-_]+)',
        r'id=([a-zA-Z0-9-_]+)',
        r'/([a-zA-Z0-9-_]{44})'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, cliente.link_empresa)
        if match:
            sheet_id = match.group(1)
            break
    
    if not sheet_id:
        print(f"‚ùå N√£o foi poss√≠vel extrair ID da planilha: {cliente.link_empresa}")
        return False
    
    # Verifica se a planilha tem aba "Procedimentos"
    print(f"üîç Verificando se {cliente.nome_da_clinica} tem aba 'Procedimentos'...")
    if not check_procedimentos_sheet_exists(sheet_id):
        print(f"‚ö†Ô∏è Cl√≠nica {cliente.nome_da_clinica} n√£o tem aba 'Procedimentos' - pulando importa√ß√£o")
        return False
    
    print(f"‚úÖ Aba 'Procedimentos' encontrada! Importando dados para {cliente.nome_da_clinica}...")
    
    # Importa dados de procedimentos
    df = import_procedimentos_from_sheets(sheet_id)
    if df is None or df.empty:
        print(f"‚ùå Nenhum procedimento encontrado para {cliente.nome_da_clinica}")
        return False
    
    # Remove procedimentos existentes da cl√≠nica
    print(f"üóëÔ∏è Removendo procedimentos existentes de {cliente.nome_da_clinica} (ID: {cliente.id})...")
    procedimento_crud.delete_procedimentos_by_cliente(cliente.id)
    
    # Insere novos procedimentos
    success_count = 0
    for _, row in df.iterrows():
        try:
            procedimento = procedimento_crud.create_procedimento(
                cliente_id=cliente.id,
                procedimento=row['procedimento'],
                mes_referencia=row['mes_referencia'],
                ano_referencia=row['ano_referencia'],
                data_primeiro_contato=row['data_primeiro_contato'],
                data_compareceu_consulta=row['data_compareceu_consulta'],
                data_fechou_cirurgia=row['data_fechou_cirurgia'],
                tipo=row['tipo'],
                quantidade_na_mesma_venda=row['quantidade_na_mesma_venda'],
                forma_pagamento=row['forma_pagamento'],
                valor_da_venda=row['valor_da_venda'],
                valor_parcelado=row['valor_parcelado']
            )
            
            if procedimento:
                success_count += 1
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao inserir procedimento: {e}")
            continue
    
    print(f"‚úÖ Importados {success_count} procedimentos para {cliente.nome_da_clinica} (ID: {cliente.id})")
    return success_count > 0

def main():
    """Fun√ß√£o principal para importar procedimentos de todas as cl√≠nicas"""
    print("üöÄ Iniciando importa√ß√£o de procedimentos...")
    
    # Busca todas as cl√≠nicas ativas (exceto admin)
    clientes = cliente_crud.get_all_clientes()
    clinicas_ativas = [c for c in clientes if not c.is_admin and c.ativo]
    
    if not clinicas_ativas:
        print("‚ùå Nenhuma cl√≠nica ativa encontrada")
        return
    
    print(f"üìä Encontradas {len(clinicas_ativas)} cl√≠nicas ativas")
    
    success_count = 0
    for cliente in clinicas_ativas:
        try:
            if load_procedimentos_for_cliente(cliente):
                success_count += 1
        except Exception as e:
            print(f"‚ùå Erro ao processar {cliente.nome_da_clinica}: {e}")
            continue
    
    print(f"üéâ Importa√ß√£o conclu√≠da! {success_count}/{len(clinicas_ativas)} cl√≠nicas processadas com sucesso")

if __name__ == "__main__":
    main()
